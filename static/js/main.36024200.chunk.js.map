{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","Card","color","className","style","textAlign","fontSize","SearchForm","props","Container","Col","marginTop","padding","borderRadius","border","Form","onSubmit","getWeather","FormGroup","Label","for","Input","type","name","placeholder","Button","Weather","city","country","iconURL","temp","min","max","humidity","description","CardHeader","CardTitle","CardBody","CardImg","width","height","src","alt","CardText","error","API_key","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","sys","weather","icon","main","toFixed","temp_min","temp_max","backgroundColor","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.36024200.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"reactstrap\";\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <Card\r\n      color=\"dark\"\r\n      className=\"text-white\"\r\n      style={{ textAlign: \"center\", fontSize: \"1.5rem\" }}\r\n    >\r\n      <h1 className=\"display-3\">Weather App</h1>\r\n      <p className=\"lead\">Search weather by city</p>\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\nconst SearchForm = (props) => (\r\n  <div>\r\n    <Container>\r\n      <Col>\r\n        <Card\r\n          color=\"dark\"\r\n          className=\"text-white\"\r\n          style={{\r\n            marginTop: \"3rem\",\r\n            padding: \"2rem\",\r\n            borderRadius: \"5px\",\r\n            border: \"2px\"\r\n          }}\r\n        >\r\n          <Form style={{ border: \"white\" }} onSubmit={props.getWeather}>\r\n            <FormGroup>\r\n              <Label for=\"city\">City</Label>\r\n              <Input type=\"text\" name=\"city\" placeholder=\"...city\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"country\">State or Country</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"country\"\r\n                placeholder=\"...state or country\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Button>Search</Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </Card>\r\n      </Col>\r\n    </Container>\r\n  </div>\r\n);\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Col,\r\n  Card,\r\n  CardTitle,\r\n  CardHeader,\r\n  CardBody,\r\n  CardText,\r\n  CardImg\r\n} from \"reactstrap\";\r\n\r\nconst Weather = (props) => (\r\n  <div>\r\n    {props.city &&\r\n      props.country &&\r\n      props.iconURL &&\r\n      props.temp &&\r\n      props.min &&\r\n      props.max &&\r\n      props.humidity &&\r\n      props.description && (\r\n        <Container>\r\n          <Col>\r\n            <Card\r\n              color=\"dark\"\r\n              className=\"text-white\"\r\n              style={{\r\n                marginTop: \"3rem\",\r\n                padding: \"2rem\",\r\n                borderRadius: \"5px\",\r\n                border: \"2px\",\r\n              }}\r\n            >\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  <h3>\r\n                    Location: {props.city}, {props.country}\r\n                  </h3>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <CardImg style={{width: \"10rem\", height: \"auto\"}} src={props.iconURL} alt=\"Weather Icon\" />\r\n                <CardText>Current Temperature: {props.temp}&deg;F</CardText>\r\n                <CardText>Min: {props.min}&deg;F</CardText>\r\n                <CardText>Max: {props.max}&deg;F</CardText>\r\n                <CardText>Humidity: {props.humidity}&#x25;</CardText>\r\n                <CardText>Conditions: {props.description}</CardText>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Container>\r\n      )}\r\n\r\n    {props.error && (\r\n      <Container>\r\n        <Col>\r\n          <Card\r\n            color=\"dark\"\r\n            className=\"text-white\"\r\n            style={{\r\n              marginTop: \"3rem\",\r\n              padding: \"2rem\",\r\n              borderRadius: \"5px\",\r\n              border: \"2px\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <CardTitle> {props.error}</CardTitle>\r\n          </Card>\r\n        </Col>\r\n      </Container>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport SearchForm from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_key = \"e118a9757bbd90e8cbd8a9d2eff8445f\";\n\nclass App extends React.Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    iconURL: undefined,\n    temp: undefined,\n    min: undefined,\n    max: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=${API_key}`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        city: data.name,\n        country: data.sys.country,\n        iconURL: `https://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n        temp: data.main.temp.toFixed(0),\n        min: data.main.temp_min.toFixed(0),\n        max: data.main.temp_max.toFixed(0),\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        city: undefined,\n        country: undefined,\n        iconURL: undefined,\n        temp: undefined,\n        min: undefined,\n        max: undefined,\n        humidity: undefined,\n        description: undefined,\n        error:\n          \"Please enter valid City and State or Country. Check spelling and don't use abbreviations for States.\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          height: \"75rem\",\n          backgroundColor: \"#808080\",\n        }}\n      >\n        <Titles />\n        <SearchForm getWeather={this.getWeather} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          iconURL={this.state.iconURL}\n          temp={this.state.temp}\n          min={this.state.min}\n          max={this.state.max}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import { createStore } from \"redux\";\n// import { Provider } from \"react-redux\";\n// import rootReducer from \"./reducers\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <App />\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}